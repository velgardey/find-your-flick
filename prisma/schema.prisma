// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum WatchStatus {
  PLAN_TO_WATCH
  WATCHING
  WATCHED
  ON_HOLD
  DROPPED
}

model User {
  id            String           @id
  email         String          @unique
  displayName   String?
  photoURL      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  watchlist     WatchlistEntry[]
  sentFriendRequests     FriendRequest[]  @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[]  @relation("ReceivedFriendRequests")
  friends       Friendship[]    @relation("UserFriends")
  friendsOf     Friendship[]    @relation("FriendsOfUser")
  inviteLinks   FriendInvite[] @relation("UserInvites")
}

model WatchlistEntry {
  id          String      @id @default(cuid())
  userId      String
  mediaId     Int
  mediaType   String      // 'movie' or 'tv'
  title       String
  posterPath  String?
  status      WatchStatus
  rating      Int?        @db.SmallInt
  notes       String?
  genres      String[]
  // Progress tracking fields for both movies and TV shows
  watchedSeconds  Float?     // Current position in seconds
  totalDuration   Float?     // Total duration in seconds
  lastWatched     DateTime?  // When the media was last watched
  // TV show specific fields
  currentSeason  Int?
  currentEpisode Int?
  totalSeasons   Int?
  totalEpisodes  Int?
  nextAirDate    String?
  showStatus     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId, mediaType])
  @@index([userId])
  @@index([status])
}

model FriendRequest {
  id          String    @id @default(cuid())
  senderId    String
  receiverId  String
  status      String    @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sender      User      @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Friendship {
  id        String    @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime  @default(now())
  user      User      @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User      @relation("FriendsOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model FriendInvite {
  id        String    @id @default(cuid())
  userId    String    @unique  // Make userId unique to ensure one invite per user
  code      String    @unique
  createdAt DateTime  @default(now())
  user      User      @relation("UserInvites", fields: [userId], references: [id], onDelete: Cascade)

  @@index([code])
}
